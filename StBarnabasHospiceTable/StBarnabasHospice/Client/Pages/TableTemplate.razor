@using System.Drawing
@inject IJSRuntime JSRuntime
@implements IDisposable
@inject ITableState _tableState

<div class="container-fluid border border-primary">
    <Split>
        <SplitPane SizeInPercentage="33" MinSize="0">
            <Split Direction="@SplitDirection.Vertical" GutterSize="7">
                <SplitPane MinSize="0">
                    @if (displayButtons?[0] == true)
                    {
                        <div class="windowPane One">
                            <div class="PaneOne container-pane pane" id="One">
                                <a class="oi oi-plus btn button" aria-hidden="true" @onclick="displayButtonOne"></a>
                            </div>
                        </div>
                    }
                    else if (displayButtons[0] == false)
                    {
                        <div class="windowPane One">
                            <div class="PaneOne button_container pane" id="One">
                                <img class="PaneImage ImageOne" placeholder="display panel one" alt="@ModelImage image" src="@_tableState.GetCurrentImage(1)" @onclick="displayButtonOne" />
                            </div>
                        </div>
                    }
                </SplitPane>
                <SplitPane MinSize="0">
                    @if (displayButtons?[1] == true)
                    {
                        <div class="windowPane Two">
                            <div class="PaneTwo container-pane pane">
                                <a class="oi oi-plus btn button" aria-hidden="true" @onclick="displayButtonTwo"></a>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="windowPane Two">
                            <div class="PaneTwo button_container pane" id="Two">
                                <img class="PaneImage ImageTwo" placeholder="display panel two" alt="@ModelImage image" src="@_tableState.GetCurrentImage(2)" @onclick="displayButtonTwo" />
                            </div>
                        </div>
                    }
                </SplitPane>
            </Split>
        </SplitPane>
        <SplitPane SizeInPercentage="33" MinSize="0">
            <Split Direction="@SplitDirection.Vertical" GutterSize="7">
                <SplitPane MinSize="0">
                    @if (displayButtons[2] == true)
                    {
                        <div class="windowPane Three">
                            <div class="PaneThree container-pane pane">
                                <a class="oi oi-plus btn button" aria-hidden="true" @onclick="displayButtonThree"></a>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="windowPane Three">
                            <div class="PaneThree button_container pane" id="Three">
                                <img class="PaneImage ImageThree" placeholder="display panel three" alt="@ModelImage image" src="@_tableState.GetCurrentImage(3)" @onclick="displayButtonThree" />
                            </div>
                        </div>
                    }
                </SplitPane>
                <SplitPane MinSize="0">
                    @if (displayButtons[3] == true)
                    {
                        <div class="windowPane Four">
                            <div class="PaneFour container-pane pane">
                                <a class="oi oi-plus btn button" aria-hidden="true" @onclick="displayButtonFour"></a>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="windowPane Four">
                            <div class="PaneFour button_container pane" id="Four">
                                <img class="PaneImage ImageFour" placeholder="display panel four" alt="@ModelImage image" src="@_tableState.GetCurrentImage(4)" @onclick="displayButtonFour" />
                            </div>
                        </div>
                    }
                </SplitPane>
            </Split>
        </SplitPane>
        <SplitPane SizeInPercentage="33" MinSize="0">
            <Split Direction="@SplitDirection.Vertical" GutterSize="7">
                <SplitPane MinSize="0">
                    @if (displayButtons[4] == true)
                    {
                        <div class="windowPane Five">
                            <div class="PaneFive container-pane pane">
                                <a class="oi oi-plus btn button" aria-hidden="true" @onclick="displayButtonFive"></a>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="windowPane Five">
                            <div class="PaneFive button_container pane" id="Five">
                                <img class="PaneImage ImageFive" placeholder="display panel five" alt="@ModelImage image" src="@_tableState.GetCurrentImage(5)" @onclick="displayButtonFive" />
                            </div>
                        </div>
                    }
                </SplitPane>
                <SplitPane MinSize="0">
                    @if (displayButtons[5] == true)
                    {
                        <div class="windowPane Six">
                            <div class="PaneSix container-pane pane">
                                <a class="oi oi-plus btn button" aria-hidden="true" @onclick="displayButtonSix"></a>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="windowPane Six">
                            <div class="PaneSix button_container pane" id="Six">
                                <img class="PaneImage ImageSix" placeholder="display panel six" alt="@ModelImage image" src="@_tableState.GetCurrentImage(6)" @onclick="displayButtonSix" />
                            </div>
                        </div>
                    }
                </SplitPane>
            </Split>
        </SplitPane>
    </Split>
</div>

<!--State Management-->
<button @onclick="ShowState">Display state</button>
@if (loadState)
{
    for (int i = 1; i < 7; i++)
    {
        <p>@_tableState.GetCurrentImage(i);</p>
    }
}


@if (imagePopup == true)
{
    @if (Items is null)
    {
        <EditForm>
            <div class="model" tabindex="-1" style="height: 50px;" role="dialog">
                <p>...loading</p>
            </div>
        </EditForm>
    }
    else
    {
        <EditForm Model="@Items" OnValidSubmit="@ValidSubmit">
            <DataAnnotationsValidator />

            <div class="modal" tabindex="-1" style="display: block; height: 75%;" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title"> Select image </h3>
                            <p>@runningCount</p>
                            <!--Button to close the popup-->
                            <a type="button" class="close oi oi-circle-x" aria-hidden="true" @onclick="ClosePopup"></a>
                        </div>
                        <div class="modal-body" style="width: max-content;">
                            <!--Selection options dropdown list-->
                            <InputSelect id="image" type="text" @bind-Value="ModelImage">
                                @foreach (var item in Items)
                                        {
                                    <option value="@item.Image">@item.Name</option>
                                        }
                            </InputSelect>
                            <ValidationMessage For="@(() => Items[0].Image)" />
                        </div>
                        <div class="modal-footer" style="justify-content: center;">
                            <button type="submit" class="btn-success" aria-hidden="true"> Select Item </button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }
}

@code {

    [Parameter] public List<Item> Items { get; set; } = new List<Item>();
    string ModelImage = "";
    string[] PaneImages = new string[6];

    bool[] displayButtons = new bool[] { true, true, true, true, true, true };
    int runningCount = 0;

    bool imagePopup = false;
    bool loadState = false;

    protected override void OnInitialized()
    {
        //TODO : (State management only intial working with pane one) Add switch statement or method reference to switch statement and repeat pane one for the other 5 window panes for persistent data control
        if (_tableState.GetCurrentImage(1) is not null)
        {
            displayButtons[0] = false;
        }
        else if (_tableState.GetCurrentImage(2) is not null)
        {
            displayButtons[1] = false;
        }
        else if (_tableState.GetCurrentImage(3) is not null)
        {
            displayButtons[2] = false;
        }
        else if (_tableState.GetCurrentImage(4) is not null)
        {
            displayButtons[3] = false;
        }
        else if (_tableState.GetCurrentImage(5) is not null)
        {
            displayButtons[4] = false;
        }
        else if (_tableState.GetCurrentImage(6) is not null)
        {
            displayButtons[5] = false;
        }

        _tableState.StateChanged += StateHasChanged;
    }

    //TODO : convert into switch statement
    void displayButtonOne()
    {
        runningCount = 1;
        ShowPopup();
    }
    void displayButtonTwo()
    {
        runningCount = 2;
        ShowPopup();
    }
    void displayButtonThree()
    {
        runningCount = 3;
        ShowPopup();
    }
    void displayButtonFour()
    {
        runningCount = 4;
        ShowPopup();
    }
    void displayButtonFive()
    {
        runningCount = 5;
        ShowPopup();
    }
    void displayButtonSix()
    {
        runningCount = 6;
        ShowPopup();
    }

    void CloseButton()
    {
        switch (runningCount)
        {
            case 1:
                displayButtons[0] = false;
                PaneImages[0] = ModelImage;
                Console.WriteLine("Button one works");
                _tableState.SetCurrentImages(1, PaneImages[0]);
                StateHasChanged();
                break;
            case 2:
                displayButtons[1] = false;
                PaneImages[1] = ModelImage;
                Console.WriteLine("Button two works");
                _tableState.SetCurrentImages(2, PaneImages[1]);
                StateHasChanged();
                break;
            case 3:
                displayButtons[2] = false;
                PaneImages[2] = ModelImage;
                Console.WriteLine("Button three works");
                _tableState.SetCurrentImages(3, PaneImages[2]);
                StateHasChanged();
                break;
            case 4:
                displayButtons[3] = false;
                PaneImages[3] = ModelImage;
                Console.WriteLine("Button four works");
                _tableState.SetCurrentImages(4, PaneImages[3]);
                StateHasChanged();
                break;
            case 5:
                displayButtons[4] = false;
                PaneImages[4] = ModelImage;
                Console.WriteLine("Button five works");
                _tableState.SetCurrentImages(5, PaneImages[4]);
                StateHasChanged();
                break;
            case 6:
                displayButtons[5] = false;
                PaneImages[5] = ModelImage;
                Console.WriteLine("Button six works");
                _tableState.SetCurrentImages(6, PaneImages[5]);
                StateHasChanged();
                break;
        }
    }

    void ClosePopup()
    {
        imagePopup = false;
        runningCount = 0;
    }
    void ShowPopup()
    {
        imagePopup = true;
    }

    void ValidSubmit()
    {
        CloseButton();
        ClosePopup();
    }

    void ShowState()
    {
        loadState = true;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        //BUG : Pane two function not triggered, all other panes work correctly
        if (firstRender)
        {
            //TODO : .NET 6 Error handling expection section improvement
            await JSRuntime.InvokeVoidAsync("blazorInterop.multiObserver");
        }
    }

    public static event Func<Task> OnResize;

    [JSInvokable]
    public static async Task OnBrowserResize()
    {
        await OnResize?.Invoke();
    }

    private async Task<Size> GetWindowPaneSizes()
    {
        return await JSRuntime.InvokeAsync<Size>("blazorInterop.getPaneOneSize");
    }

    public void Dispose()
    {
        _tableState.StateChanged -= StateHasChanged;
    }
}