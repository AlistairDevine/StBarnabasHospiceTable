@page "/barnabas"
@using Blazorme
@using StBarnabasHospiceTable.Shared
@using StBarnabasHospiceTable.Client.Services
@using StBarnabasHospiceTable.Client.Pages.SessionState 

@inherits StBarnabasBase


<!--State management now call the GetCurrentCount() method to get the current count-->

<style>
    a.button1 {
        border: 0.1em solid #000000;
        border-radius: 0.12em;
        box-sizing: border-box;
        color: #000000;
    }

        a.button1:hover {
            color: #FFFFFF;
            background-color: #000000;
        }

    .container-pane {
        padding: 70px 0;
        vertical-align: middle
    }
</style>

<ButtonTemplate/>

@code {
    /// <summary>
    /// Global variables
    /// </summary>
    [Inject]
    public IItemDataService itemService { get; set; }
    public List<Item> Items { get; set; } = new List<Item>();

    /// <summary>
    /// Popup code
    /// </summary>
    bool imagePopup = false;
    bool displayButton = true;

    void CloseButton()
    {
        displayButton = false;
    }
    void ShowButton()
    {
        displayButton = true;
    }

    void ClosePopup()
    {
        imagePopup = false;
    }
    void ShowPopup()
    {
        imagePopup = true;
    }

    void EventHandleSelect()
    {
        ClosePopup();
        CloseButton();
    }

    /// <summary>
    /// Button / Session State  code
    /// </summary>
    //Have display button1, button2, button3, button4...
    //OR
    //Figure out a reference id type for each button
    int buttonCount = 1;
    int buttonSection = 3;

    public int Count { get; set; }
    //PWD:: Research
    private void buttonCounting()
    {
        //Session State management calls the GetCurrentCount method for the current count
        //int buttonCount = CounterState.GetCurrentCount();
        //Set the current count to the button value
        //...
        //Set Current count on the Session State object
        //CounterState.UpdateCurrentCount(buttonCount);
    }

    /// <summary>
    /// Rendering code
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        ClosePopup();
        ShowButton();
        Items = (await itemService.GetAllItems()).ToList();

        if (Count != 0)
        {
            Items = Items.Take(Count).ToList();
        }
    }
} 