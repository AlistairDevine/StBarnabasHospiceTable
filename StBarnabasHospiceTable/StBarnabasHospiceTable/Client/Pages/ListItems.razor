<!--Page route path-->
@page "/listitem"

<!--Link to the item service data class, back-end code-->
@inject IItemDataService itemService
@inject HttpClient httpClient
@inject NavigationManager navigationManager
<!--List of all items in catergories-->
<div id="items" class="widget">
    <!--Title and Button to add new item to the list.-->
    <h3 style="margin-bottom: 10px;">Items<button type="submit" @onclick="@ToggleAddItem" class="btn btn-primary edit-btn float-right">Add PNG Item</button></h3>
    <p>@Message</p>

    @if (items == null)
    {
        <div class="loading">
            <img alt="Loading indicator" class="oi oi-loop-circular" /> Loading
        </div>
    }
    else
    {
        <div class="m-4 my-5 grid md:grid-cols-2 lg:grid-cols-3 gap-4">
            @foreach (var item in items)
            {
                <ImageListItem Image="@item" />
            }
        </div>
    }
</div>

@code {

    private List<Item> items = new List<Item>();
    //Add item values
    public bool ShowPopup = false;
    public string Message { get; set; }
    public Item CreateItem { get; set; }

    void ToggleAddItem()
    {
        navigationManager.NavigateTo("/item/create");
    }

    public void ClosePopup()
    {
        //Close the Popup
        ShowPopup = false;
    }

    protected override async Task OnInitializedAsync()
    {
        ShowPopup = false;
        items = await httpClient.GetFromJsonAsync<List<Item>>("api/Item");
    }

    public async Task HandleValidSubmit()
    {
        //Api call for creation of item
        //Save the item to the item list
        await httpClient.PostAsJsonAsync<Item>("api/Item", CreateItem);

        if (CreateItem != null)
        {
            navigationManager.NavigateTo("/listitem");
        }
        else
        {
            Console.WriteLine(CreateItem);
        }
    }
}

